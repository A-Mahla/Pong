// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
	 previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  login        String      @unique
  password     String
  avatar       String      @default("default_avatar.jpg")
  intraLogin   String?     @unique
  refreshToken String?
  twoFA		   String?
  isTwoFA	   Boolean     @default(false)
  games        User_Game[]
  ownedRooms   Room[]      @relation("RoomOwner")
  member       User_Room[]

}

model Room {
  room_id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(false)
  password  String?
  name      String
  owner     User?    @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   Int?
  members   User_Room[]
}

model User_Room {
  member    User @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member_id Int
  room      Room @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: Cascade)
  room_id   Int

  @@id([member_id, room_id])
}

model Games {
	game_id			Int	@id		@default(autoincrement())
	played_at		DateTime	@default(now())
	status			String		@default("--")
	players			User_Game[]
}

model User_Game {
  player  User  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
  game    Games @relation(fields: [game_id], references: [game_id], onDelete: Cascade, onUpdate: Cascade)
  game_id Int
  score   Int

  @@id([user_id, game_id])
}
